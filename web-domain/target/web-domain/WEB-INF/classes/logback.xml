<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration>
<configuration>
	<property name="LOG_HOME" value="D:/logs/domain-web/logs" />

	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
   			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}, %p, %t, %m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
	</appender>
	
	<appender name="error-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
   			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}, %t, %m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
		<!-- 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">    
           <level>ERROR</level>
           <onMatch>ACCEPT</onMatch>
           <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
        <file>${LOG_HOME}/error.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">    
           <!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip -->
           <fileNamePattern>${LOG_HOME}/error.%i.log</fileNamePattern>  
           <minIndex>1</minIndex>
           <maxIndex>20</maxIndex>  
        </rollingPolicy>
        <!--查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">    
           <maxFileSize>10MB</maxFileSize>    
        </triggeringPolicy>
	</appender>
	
	<appender name="warn-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
   			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}, %t, %m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
		<!-- 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">    
           <level>WARN</level>    
           <onMatch>ACCEPT</onMatch>    
           <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
        <file>${LOG_HOME}/warn.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">    
           <!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip -->
           <fileNamePattern>${LOG_HOME}/warn.%i.log</fileNamePattern>  
           <minIndex>1</minIndex>
           <maxIndex>20</maxIndex>    
        </rollingPolicy>
        <!--查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">    
           <maxFileSize>10MB</maxFileSize>    
        </triggeringPolicy>
	</appender>
	
	<appender name="info-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
   			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}, %t, %m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
		<!-- 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">    
           <level>INFO</level>    
           <onMatch>ACCEPT</onMatch>    
           <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
        <file>${LOG_HOME}/info.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">    
           <!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip -->
           <fileNamePattern>${LOG_HOME}/info.%i.log</fileNamePattern>  
           <minIndex>1</minIndex>
           <maxIndex>20</maxIndex>    
        </rollingPolicy>
        <!--查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">    
           <maxFileSize>10MB</maxFileSize>    
        </triggeringPolicy>
	</appender>
	
	<appender name="debug-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
   			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}, %t, %m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
		<!-- 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">    
           <level>DEBUG</level>    
           <onMatch>ACCEPT</onMatch>    
           <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
        <file>${LOG_HOME}/debug.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">    
           <!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip -->
           <fileNamePattern>${LOG_HOME}/debug.%i.log</fileNamePattern>  
           <minIndex>1</minIndex>
           <maxIndex>20</maxIndex>    
        </rollingPolicy>
        <!--查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">    
           <maxFileSize>10MB</maxFileSize>    
        </triggeringPolicy>
	</appender>
	
	<appender name="trace-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
   			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}, %t, %m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
		<!-- 级别过滤器，根据日志级别进行过滤。如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">    
           <level>TRACE</level>    
           <onMatch>ACCEPT</onMatch>    
           <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
        <file>${LOG_HOME}/trace.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">    
           <!-- 必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip -->
           <fileNamePattern>${LOG_HOME}/trace.%i.log</fileNamePattern>  
           <minIndex>1</minIndex>
           <maxIndex>20</maxIndex>    
        </rollingPolicy>
        <!--查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">    
           <maxFileSize>10MB</maxFileSize>    
        </triggeringPolicy>
	</appender>
	
	<appender name="user-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}|%m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
        <!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
        <file>${LOG_HOME}/data/user.log</file>
        <append>true</append>
        <!-- 根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/data/user-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>
    
    <appender name="topup-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}|%m%n</pattern>
        </encoder>
        <charset>UTF-8</charset>
        <!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
        <file>${LOG_HOME}/data/topup.log</file>
        <append>true</append>
        <!-- 根据时间来制定滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/data/topup-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>
    
    
    <!-- SMS Log 2016-07-11  -->
	<appender name="sms-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %m%n</pattern>
		</encoder>
		<charset>UTF-8</charset>
		<!-- 当前日志总是记录到file指定的文件（活动文件） 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值 -->
		<file>${LOG_HOME}/sms.log</file>
		<append>true</append>
		<!-- 根据时间来制定滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/sms-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
	</appender>
	
	<logger name="userRecorder" level="INFO" additivity="false">
		<appender-ref ref="stdout" />
		<appender-ref ref="user-file" />
	</logger>
	
	<logger name="topUpRecorder" level="INFO" additivity="false">
		<appender-ref ref="stdout" />
		<appender-ref ref="topup-file" />
	</logger>
	
	<logger name="smsRecorder" level="INFO" additivity="false">
		<appender-ref ref="stdout" />
		<appender-ref ref="sms-file" />
	</logger>
	
	<logger name="net.sf.ehcache.store.disk.Segment" level="INFO" additivity="false">
		<appender-ref ref="stdout" />
	    <appender-ref ref="error-file" />
	    <appender-ref ref="warn-file" />
	    <appender-ref ref="info-file" />
	    <appender-ref ref="debug-file" />
	</logger>
	
	<root level="DEBUG">
		<appender-ref ref="stdout" />
	    <appender-ref ref="error-file" />
	    <appender-ref ref="warn-file" />
	    <appender-ref ref="info-file" />
	    <appender-ref ref="debug-file" />
	    <appender-ref ref="trace-file" />
  	</root>
</configuration>